static int semWait();
static int semSignal();
static int set_semvalue();
static int del_semvalue();

static int sem_id;

int main(int argc, char* argv[]) {
    int i;
    int pauseTime;
    char op_char = 'O';

    srand((unsigned int) getpid()); // for generating Random numbers using pID as a seed -

    // Creating the semaphore,
    sem_id = semget((key_t)3125, 1, 0666 | IPC_CREAT);

    if (argc > 1) { // The first foreground process "./output 1 &" (argc = 2 here: 1 &)
        printf("\n-First Foreground Process Running- ");
        semctl(sem_id, 0, SETVAL, 1); // Initializing the Semaphore
        op_char = 'X'; // First process sets op_char to 'X'
        sleep(5); // sleep 5 seconds to allow for the other process below to execute
    } else {
        printf("\n-Second Process Running-");
    }

    // a loop to be executed by both processes
    // both processes will enter or leave the Critical Section 10 times
    for (i = 0; i < 10; i++) {
        semWait(); // --- Critical Section Entry -----
        printf("%c", op_char); fflush(stdout);
        pauseTime = rand() % 3; // the process will wait 0, 1 or 2 seconds
        sleep(pauseTime);
        printf("%c", op_char); fflush(stdout);
        pauseTime = rand() % 2;
        semSignal(); // --- Critical Section Leave -----
        sleep(pauseTime);
    }

  printf(("\n ---> Process %d finished \n", getpid());
  if(argc > 1){
    sleep(3);
    semctl(sem_id, 0, IPC_RMID, 1); 
  }
  return 0;
}

static int semWait() {
    struct sembuf s;
    s.sem_num = 0;
    s.sem_op = -1;
    s.sem_flg = SEM_UNDO;
    semop(sem_id, &s, 1);
    printf("\n ---- I - process %d just made a wait call - am waiting \n", getpid());

    return 0;
}

static int semSignal() {
    struct sembuf s;
    s.sem_num = 0;
    s.sem_op = 1;
    s.sem_flg = SEM_UNDO;
    semop(sem_id, &s, 1);
    printf("\n ++++ I - process %d just released the Semaphore \n", getpid());

    return 0;
}
